// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Cli Should convert files into output folder file 1`] = `
"export type Record = User;

export interface User {
    /**
     * System-assigned numeric user ID. Cannot be changed by the user.
     */
    id: number;
    /**
     * The username chosen by the user. Can be changed by the user.
     */
    username: string;
    /**
     * The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).
     */
    passwordHash: string;
    /**
     * Timestamp (milliseconds since epoch) when the user signed up
     */
    signupDate: number;
    mapField: {
        [index: string]: Foo;
    };
    /**
     * All email addresses on the user's account
     */
    emailAddresses: EmailAddress[];
    /**
     * Indicator of whether this authorization is currently active, or has been revoked
     */
    status: \\"ACTIVE\\" | \\"INACTIVE\\";
}

export interface Foo {
    label: string;
}

export interface EmailAddress {
    /**
     * The email address, e.g. \`foo@example.com\`
     */
    address: string;
    /**
     * true if the user has clicked the link in a confirmation email to this address.
     */
    verified: boolean;
    /**
     * Timestamp (milliseconds since epoch) when the email address was added to the account.
     */
    dateAdded: number;
}"
`;

exports[`Cli Should convert files into output folder file 2`] = `
"export namespace Names {
    export const AccountMigrationCancelledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\";
    export const AccountMigrationCompletedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\";
    export const AccountMigrationRollBackInitiatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\";
    export const AccountMigrationRolledBackEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\";
    export const AccountMigrationScheduledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\";
    export const AccountMigrationValidatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\";
    export const BalanceRetrievedMigrationEvent = \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\";
}

export type Record = AccountMigrationEvent;

export interface AccountMigrationEvent {
    event: NamespacedAccountMigrationCancelledEvent | NamespacedAccountMigrationCompletedEvent | NamespacedAccountMigrationRollBackInitiatedEvent | NamespacedAccountMigrationRolledBackEvent | NamespacedAccountMigrationScheduledEvent | NamespacedAccountMigrationValidatedEvent | NamespacedBalanceRetrievedMigrationEvent;
}

export interface AccountMigrationCancelledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * Because dates as Decimal are the best!
     */
    effectiveEnrollmentDateAsDecimal: number;
    /**
     * The time when the migration was cancelled (in epoch millis)
     */
    cancelledAt: number;
}

export interface EventMetadata {
    /**
     * A globally unique ID for this Kafka message
     */
    eventId: string;
    /**
     * An ID that can be used to link all the requests and Kafka messages in a given transaction. If you already have a trace token from a previous event/request, you should copy it here. If this is the very start of a transaction, you should generate a fresh trace token and put it here. A UUID is suitable
     */
    traceToken: string;
    /**
     * A timestamp for when the event was created (in epoch millis)
     */
    createdAt: number;
}

export interface NamespacedAccountMigrationCancelledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\": AccountMigrationCancelledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationCompletedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration was completed (in epoch millis)
     */
    completedAt: number;
}

export interface NamespacedAccountMigrationCompletedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\": AccountMigrationCompletedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRollBackInitiatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration rollback was initiated (in epoch millis)
     */
    rollBackInitiatedAt: number;
}

export interface NamespacedAccountMigrationRollBackInitiatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\": AccountMigrationRollBackInitiatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRolledBackEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration was rolled back (in epoch millis)
     */
    rolledBackAt: number;
}

export interface NamespacedAccountMigrationRolledBackEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\": AccountMigrationRolledBackEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationScheduledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the customer came on supply with Boost (in epoch days)
     */
    supplyStartDate: number;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration was scheduled (in epoch millis)
     */
    scheduledAt: number;
}

export interface NamespacedAccountMigrationScheduledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\": AccountMigrationScheduledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationValidatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migrated balance and transactions were validated (in epoch millis)
     */
    validatedAt: number;
}

export interface NamespacedAccountMigrationValidatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\": AccountMigrationValidatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface BalanceRetrievedMigrationEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the balance and transaction history was fetched (in epoch millis)
     */
    retrievedAt: number;
}

export interface NamespacedBalanceRetrievedMigrationEvent {
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\": BalanceRetrievedMigrationEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
}"
`;

exports[`Cli Should convert files with logical types 1`] = `
"export type Record = User;

export interface User {
    /**
     * System-assigned numeric user ID. Cannot be changed by the user.
     */
    id: number;
    /**
     * The username chosen by the user. Can be changed by the user.
     */
    username: string;
    /**
     * The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).
     */
    passwordHash: string;
    /**
     * Timestamp (milliseconds since epoch) when the user signed up
     */
    signupDate: number;
    mapField: {
        [index: string]: Foo;
    };
    /**
     * All email addresses on the user's account
     */
    emailAddresses: EmailAddress[];
    /**
     * Indicator of whether this authorization is currently active, or has been revoked
     */
    status: \\"ACTIVE\\" | \\"INACTIVE\\";
}

export interface Foo {
    label: string;
}

export interface EmailAddress {
    /**
     * The email address, e.g. \`foo@example.com\`
     */
    address: string;
    /**
     * true if the user has clicked the link in a confirmation email to this address.
     */
    verified: boolean;
    /**
     * Timestamp (milliseconds since epoch) when the email address was added to the account.
     */
    dateAdded: number;
}"
`;

exports[`Cli Should convert files with logical types 2`] = `
"export namespace Names {
    export const AccountMigrationCancelledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\";
    export const AccountMigrationCompletedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\";
    export const AccountMigrationRollBackInitiatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\";
    export const AccountMigrationRolledBackEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\";
    export const AccountMigrationScheduledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\";
    export const AccountMigrationValidatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\";
    export const BalanceRetrievedMigrationEvent = \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\";
}

export type Record = AccountMigrationEvent;

export interface AccountMigrationEvent {
    event: NamespacedAccountMigrationCancelledEvent | NamespacedAccountMigrationCompletedEvent | NamespacedAccountMigrationRollBackInitiatedEvent | NamespacedAccountMigrationRolledBackEvent | NamespacedAccountMigrationScheduledEvent | NamespacedAccountMigrationValidatedEvent | NamespacedBalanceRetrievedMigrationEvent;
}

export interface AccountMigrationCancelledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * Because dates as Decimal are the best!
     */
    effectiveEnrollmentDateAsDecimal: number;
    /**
     * The time when the migration was cancelled (in epoch millis)
     */
    cancelledAt: string;
}

export interface EventMetadata {
    /**
     * A globally unique ID for this Kafka message
     */
    eventId: string;
    /**
     * An ID that can be used to link all the requests and Kafka messages in a given transaction. If you already have a trace token from a previous event/request, you should copy it here. If this is the very start of a transaction, you should generate a fresh trace token and put it here. A UUID is suitable
     */
    traceToken: string;
    /**
     * A timestamp for when the event was created (in epoch millis)
     */
    createdAt: string;
}

export interface NamespacedAccountMigrationCancelledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\": AccountMigrationCancelledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationCompletedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * The time when the migration was completed (in epoch millis)
     */
    completedAt: string;
}

export interface NamespacedAccountMigrationCompletedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\": AccountMigrationCompletedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRollBackInitiatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * The time when the migration rollback was initiated (in epoch millis)
     */
    rollBackInitiatedAt: string;
}

export interface NamespacedAccountMigrationRollBackInitiatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\": AccountMigrationRollBackInitiatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRolledBackEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * The time when the migration was rolled back (in epoch millis)
     */
    rolledBackAt: string;
}

export interface NamespacedAccountMigrationRolledBackEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\": AccountMigrationRolledBackEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationScheduledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the customer came on supply with Boost (in epoch days)
     */
    supplyStartDate: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * The time when the migration was scheduled (in epoch millis)
     */
    scheduledAt: string;
}

export interface NamespacedAccountMigrationScheduledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\": AccountMigrationScheduledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationValidatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * The time when the migrated balance and transactions were validated (in epoch millis)
     */
    validatedAt: string;
}

export interface NamespacedAccountMigrationValidatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\": AccountMigrationValidatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface BalanceRetrievedMigrationEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: string;
    /**
     * The time when the balance and transaction history was fetched (in epoch millis)
     */
    retrievedAt: string;
}

export interface NamespacedBalanceRetrievedMigrationEvent {
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\": BalanceRetrievedMigrationEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
}"
`;

exports[`Cli Should convert files with logical types and imports 1`] = `
"import { Decimal } from 'decimal.js'

export namespace Names {
    export const AccountMigrationCancelledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\";
    export const AccountMigrationCompletedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\";
    export const AccountMigrationRollBackInitiatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\";
    export const AccountMigrationRolledBackEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\";
    export const AccountMigrationScheduledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\";
    export const AccountMigrationValidatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\";
    export const BalanceRetrievedMigrationEvent = \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\";
}

export type Record = AccountMigrationEvent;

export interface AccountMigrationEvent {
    event: NamespacedAccountMigrationCancelledEvent | NamespacedAccountMigrationCompletedEvent | NamespacedAccountMigrationRollBackInitiatedEvent | NamespacedAccountMigrationRolledBackEvent | NamespacedAccountMigrationScheduledEvent | NamespacedAccountMigrationValidatedEvent | NamespacedBalanceRetrievedMigrationEvent;
}

export interface AccountMigrationCancelledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * Because dates as Decimal are the best!
     */
    effectiveEnrollmentDateAsDecimal: number;
    /**
     * The time when the migration was cancelled (in epoch millis)
     */
    cancelledAt: number;
}

export interface EventMetadata {
    /**
     * A globally unique ID for this Kafka message
     */
    eventId: string;
    /**
     * An ID that can be used to link all the requests and Kafka messages in a given transaction. If you already have a trace token from a previous event/request, you should copy it here. If this is the very start of a transaction, you should generate a fresh trace token and put it here. A UUID is suitable
     */
    traceToken: string;
    /**
     * A timestamp for when the event was created (in epoch millis)
     */
    createdAt: number;
}

export interface NamespacedAccountMigrationCancelledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\": AccountMigrationCancelledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationCompletedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * The time when the migration was completed (in epoch millis)
     */
    completedAt: number;
}

export interface NamespacedAccountMigrationCompletedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\": AccountMigrationCompletedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRollBackInitiatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * The time when the migration rollback was initiated (in epoch millis)
     */
    rollBackInitiatedAt: number;
}

export interface NamespacedAccountMigrationRollBackInitiatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\": AccountMigrationRollBackInitiatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRolledBackEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * The time when the migration was rolled back (in epoch millis)
     */
    rolledBackAt: number;
}

export interface NamespacedAccountMigrationRolledBackEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\": AccountMigrationRolledBackEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationScheduledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the customer came on supply with Boost (in epoch days)
     */
    supplyStartDate: Decimal;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * The time when the migration was scheduled (in epoch millis)
     */
    scheduledAt: number;
}

export interface NamespacedAccountMigrationScheduledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\": AccountMigrationScheduledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationValidatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * The time when the migrated balance and transactions were validated (in epoch millis)
     */
    validatedAt: number;
}

export interface NamespacedAccountMigrationValidatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\": AccountMigrationValidatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface BalanceRetrievedMigrationEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: Decimal;
    /**
     * The time when the balance and transaction history was fetched (in epoch millis)
     */
    retrievedAt: number;
}

export interface NamespacedBalanceRetrievedMigrationEvent {
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\": BalanceRetrievedMigrationEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
}"
`;

exports[`Cli Should convert multiple files 1`] = `
"export type Record = User;

export interface User {
    /**
     * System-assigned numeric user ID. Cannot be changed by the user.
     */
    id: number;
    /**
     * The username chosen by the user. Can be changed by the user.
     */
    username: string;
    /**
     * The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).
     */
    passwordHash: string;
    /**
     * Timestamp (milliseconds since epoch) when the user signed up
     */
    signupDate: number;
    mapField: {
        [index: string]: Foo;
    };
    /**
     * All email addresses on the user's account
     */
    emailAddresses: EmailAddress[];
    /**
     * Indicator of whether this authorization is currently active, or has been revoked
     */
    status: \\"ACTIVE\\" | \\"INACTIVE\\";
}

export interface Foo {
    label: string;
}

export interface EmailAddress {
    /**
     * The email address, e.g. \`foo@example.com\`
     */
    address: string;
    /**
     * true if the user has clicked the link in a confirmation email to this address.
     */
    verified: boolean;
    /**
     * Timestamp (milliseconds since epoch) when the email address was added to the account.
     */
    dateAdded: number;
}"
`;

exports[`Cli Should convert multiple files 2`] = `
"export namespace Names {
    export const AccountMigrationCancelledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\";
    export const AccountMigrationCompletedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\";
    export const AccountMigrationRollBackInitiatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\";
    export const AccountMigrationRolledBackEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\";
    export const AccountMigrationScheduledEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\";
    export const AccountMigrationValidatedEvent = \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\";
    export const BalanceRetrievedMigrationEvent = \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\";
}

export type Record = AccountMigrationEvent;

export interface AccountMigrationEvent {
    event: NamespacedAccountMigrationCancelledEvent | NamespacedAccountMigrationCompletedEvent | NamespacedAccountMigrationRollBackInitiatedEvent | NamespacedAccountMigrationRolledBackEvent | NamespacedAccountMigrationScheduledEvent | NamespacedAccountMigrationValidatedEvent | NamespacedBalanceRetrievedMigrationEvent;
}

export interface AccountMigrationCancelledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * Because dates as Decimal are the best!
     */
    effectiveEnrollmentDateAsDecimal: number;
    /**
     * The time when the migration was cancelled (in epoch millis)
     */
    cancelledAt: number;
}

export interface EventMetadata {
    /**
     * A globally unique ID for this Kafka message
     */
    eventId: string;
    /**
     * An ID that can be used to link all the requests and Kafka messages in a given transaction. If you already have a trace token from a previous event/request, you should copy it here. If this is the very start of a transaction, you should generate a fresh trace token and put it here. A UUID is suitable
     */
    traceToken: string;
    /**
     * A timestamp for when the event was created (in epoch millis)
     */
    createdAt: number;
}

export interface NamespacedAccountMigrationCancelledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\": AccountMigrationCancelledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationCompletedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration was completed (in epoch millis)
     */
    completedAt: number;
}

export interface NamespacedAccountMigrationCompletedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\": AccountMigrationCompletedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRollBackInitiatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration rollback was initiated (in epoch millis)
     */
    rollBackInitiatedAt: number;
}

export interface NamespacedAccountMigrationRollBackInitiatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\": AccountMigrationRollBackInitiatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationRolledBackEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration was rolled back (in epoch millis)
     */
    rolledBackAt: number;
}

export interface NamespacedAccountMigrationRolledBackEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\": AccountMigrationRolledBackEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationScheduledEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the customer came on supply with Boost (in epoch days)
     */
    supplyStartDate: number;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migration was scheduled (in epoch millis)
     */
    scheduledAt: number;
}

export interface NamespacedAccountMigrationScheduledEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\": AccountMigrationScheduledEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface AccountMigrationValidatedEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the migrated balance and transactions were validated (in epoch millis)
     */
    validatedAt: number;
}

export interface NamespacedAccountMigrationValidatedEvent {
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\": AccountMigrationValidatedEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\"?: never;
}

export interface BalanceRetrievedMigrationEvent {
    metadata: EventMetadata;
    /**
     * Globally unique identifier for the enrollment
     */
    enrollmentId: string;
    /**
     * Unique identifier for the customer. GentrackId/SiemensId. Usually 7 digits.
     */
    accountId: string;
    /**
     * The unique national reference for Meter Point Administration Number
     */
    mpan: string;
    /**
     * The date when the account is going to be enrolled for the new balance platform (in epoch days)
     */
    effectiveEnrollmentDate: number;
    /**
     * The time when the balance and transaction history was fetched (in epoch millis)
     */
    retrievedAt: number;
}

export interface NamespacedBalanceRetrievedMigrationEvent {
    \\"uk.co.boostpower.support.kafka.messages.BalanceRetrievedMigrationEvent\\": BalanceRetrievedMigrationEvent;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCancelledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationCompletedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRollBackInitiatedEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationRolledBackEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationScheduledEvent\\"?: never;
    \\"uk.co.boostpower.support.kafka.messages.AccountMigrationValidatedEvent\\"?: never;
}"
`;

exports[`Cli Should convert single file 1`] = `
"export type Record = User;

export interface User {
    /**
     * System-assigned numeric user ID. Cannot be changed by the user.
     */
    id: number;
    /**
     * The username chosen by the user. Can be changed by the user.
     */
    username: string;
    /**
     * The user's password, hashed using [scrypt](http://www.tarsnap.com/scrypt.html).
     */
    passwordHash: string;
    /**
     * Timestamp (milliseconds since epoch) when the user signed up
     */
    signupDate: number;
    mapField: {
        [index: string]: Foo;
    };
    /**
     * All email addresses on the user's account
     */
    emailAddresses: EmailAddress[];
    /**
     * Indicator of whether this authorization is currently active, or has been revoked
     */
    status: \\"ACTIVE\\" | \\"INACTIVE\\";
}

export interface Foo {
    label: string;
}

export interface EmailAddress {
    /**
     * The email address, e.g. \`foo@example.com\`
     */
    address: string;
    /**
     * true if the user has clicked the link in a confirmation email to this address.
     */
    verified: boolean;
    /**
     * Timestamp (milliseconds since epoch) when the email address was added to the account.
     */
    dateAdded: number;
}"
`;
